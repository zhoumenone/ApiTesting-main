{"name": "test_pay[test_case0]", "status": "broken", "statusDetails": {"message": "Exception: JSON格式校验，关键字 statusCode 不在返回结果 {} 中！", "trace": "self = <test_pay.TestProduct object at 0x04A1F6B8>\ntest_case = {'check_body': {'check_type': 'check_json', 'expected_code': 200, 'expected_result': {'callbackType': 'closeCurrent', ... {'callbackType': 'closeCurrent', 'forwardUrl': '', 'navTabId': 'zfcpgl', 'productCode': '112', ...}, 'summary': 'pay'}\n\n    @pytest.mark.parametrize(\"test_case\", case_data[\"test_case\"])\n    @allure.story(\"test_pay\")\n    def test_pay(self, test_case):\n        # 初始化请求：执行前置接口+替换关联变量\n        test_info, test_case = init_premise(case_data[\"test_info\"], test_case, case_path)\n        # 发送当前接口\n        code, data = send_request(test_info, test_case)\n        # 校验接口返回\n>       check_result(test_case, code, data)\n\nPyDemo\\testcase\\product\\test_pay.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncomm\\unit\\checkResult.py:159: in check_result\n    check_json(expected_result, data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc_data = {'callbackType': 'closeCurrent', 'forwardUrl': '', 'message': '操作成功', 'navTabId': 'zfcpgl', ...}\ndst_data = '{}'\n\n    def check_json(src_data, dst_data):\n        \"\"\"\n        校验的json\n        :param src_data: 检验内容\n        :param dst_data: 接口返回的数据\n        :return:\n        \"\"\"\n        if isinstance(src_data, dict):\n            for key in src_data:\n                if key not in dst_data:\n>                   raise Exception(\"JSON格式校验，关键字 %s 不在返回结果 %s 中！\" % (key, dst_data))\nE                   Exception: JSON格式校验，关键字 statusCode 不在返回结果 {} 中！\n\ncomm\\unit\\checkResult.py:24: Exception"}, "steps": [{"name": "POST请求接口", "status": "passed", "attachments": [{"name": "请求接口", "source": "edd200a6-0a4d-48eb-9649-310b7e08d11f-attachment.attach"}, {"name": "请求地址", "source": "21308b56-2347-4a31-9eb1-3b9fa2c51b69-attachment.attach"}, {"name": "请求头", "source": "09b45aaf-bce3-42b1-8fc0-652bf66afc9b-attachment.attach"}, {"name": "请求参数", "source": "f79c7275-f588-4468-9167-023afb29865f-attachment.attach"}], "start": 1682068359841, "stop": 1682068359841}, {"name": "JSON格式校验接口", "status": "passed", "attachments": [{"name": "实际code", "source": "28a7342b-8425-45f5-9d1f-1352b6f984d2-attachment.attach"}, {"name": "期望code", "source": "8cdc55ff-4609-4d93-a12e-d95dc2c46a52-attachment.attach"}, {"name": "实际data", "source": "6371db0d-b0de-4eb0-8b41-e59fe3caa9b0-attachment.attach"}, {"name": "期望data", "source": "1e56aa41-b973-4f8f-b48c-e4346556ca75-attachment.attach"}], "start": 1682068361447, "stop": 1682068361447}], "attachments": [{"name": "log", "source": "43b453fe-f09c-47ee-9f3c-5a92c3a26a3c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_case", "value": "{'summary': 'pay', 'describe': 'test_pay', 'parameter': {'navTabId': 'zfcpgl', 'callbackType': 'closeCurrent', 'forwardUrl': '', 'productCode': '112', 'productName': '1213'}, 'check_body': {'check_type': 'check_json', 'expected_code': 200, 'expected_result': {'statusCode': '200', 'message': '操作成功', 'navTabId': 'zfcpgl', 'callbackType': 'closeCurrent', 'forwardUrl': ''}}}"}], "start": 1682068359841, "stop": 1682068361447, "uuid": "de169f44-8ef4-4c65-bdd1-f80f719dc0d3", "historyId": "9d8074231baa959cd838087b6c2d095d", "testCaseId": "f7bca3df0da2b832b23624a1b055c149", "fullName": "PyDemo.testcase.product.test_pay.TestProduct#test_pay", "labels": [{"name": "feature", "value": "product"}, {"name": "story", "value": "test_pay"}, {"name": "parentSuite", "value": "PyDemo.testcase.product"}, {"name": "suite", "value": "test_pay"}, {"name": "subSuite", "value": "TestProduct"}, {"name": "host", "value": "LAPTOP-8MU3MRG8"}, {"name": "thread", "value": "23148-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "PyDemo.testcase.product.test_pay"}]}