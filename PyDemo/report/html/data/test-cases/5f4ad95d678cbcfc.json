{
  "uid" : "5f4ad95d678cbcfc",
  "name" : "test_pay[test_case0]",
  "fullName" : "PyDemo.testcase.product.test_pay.TestProduct#test_pay",
  "historyId" : "9d8074231baa959cd838087b6c2d095d",
  "time" : {
    "start" : 1682068359841,
    "stop" : 1682068361447,
    "duration" : 1606
  },
  "status" : "broken",
  "statusMessage" : "Exception: JSON格式校验，关键字 statusCode 不在返回结果 {} 中！",
  "statusTrace" : "self = <test_pay.TestProduct object at 0x04A1F6B8>\ntest_case = {'check_body': {'check_type': 'check_json', 'expected_code': 200, 'expected_result': {'callbackType': 'closeCurrent', ... {'callbackType': 'closeCurrent', 'forwardUrl': '', 'navTabId': 'zfcpgl', 'productCode': '112', ...}, 'summary': 'pay'}\n\n    @pytest.mark.parametrize(\"test_case\", case_data[\"test_case\"])\n    @allure.story(\"test_pay\")\n    def test_pay(self, test_case):\n        # 初始化请求：执行前置接口+替换关联变量\n        test_info, test_case = init_premise(case_data[\"test_info\"], test_case, case_path)\n        # 发送当前接口\n        code, data = send_request(test_info, test_case)\n        # 校验接口返回\n>       check_result(test_case, code, data)\n\nPyDemo\\testcase\\product\\test_pay.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncomm\\unit\\checkResult.py:159: in check_result\n    check_json(expected_result, data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc_data = {'callbackType': 'closeCurrent', 'forwardUrl': '', 'message': '操作成功', 'navTabId': 'zfcpgl', ...}\ndst_data = '{}'\n\n    def check_json(src_data, dst_data):\n        \"\"\"\n        校验的json\n        :param src_data: 检验内容\n        :param dst_data: 接口返回的数据\n        :return:\n        \"\"\"\n        if isinstance(src_data, dict):\n            for key in src_data:\n                if key not in dst_data:\n>                   raise Exception(\"JSON格式校验，关键字 %s 不在返回结果 %s 中！\" % (key, dst_data))\nE                   Exception: JSON格式校验，关键字 statusCode 不在返回结果 {} 中！\n\ncomm\\unit\\checkResult.py:24: Exception",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "Exception: JSON格式校验，关键字 statusCode 不在返回结果 {} 中！",
    "statusTrace" : "self = <test_pay.TestProduct object at 0x04A1F6B8>\ntest_case = {'check_body': {'check_type': 'check_json', 'expected_code': 200, 'expected_result': {'callbackType': 'closeCurrent', ... {'callbackType': 'closeCurrent', 'forwardUrl': '', 'navTabId': 'zfcpgl', 'productCode': '112', ...}, 'summary': 'pay'}\n\n    @pytest.mark.parametrize(\"test_case\", case_data[\"test_case\"])\n    @allure.story(\"test_pay\")\n    def test_pay(self, test_case):\n        # 初始化请求：执行前置接口+替换关联变量\n        test_info, test_case = init_premise(case_data[\"test_info\"], test_case, case_path)\n        # 发送当前接口\n        code, data = send_request(test_info, test_case)\n        # 校验接口返回\n>       check_result(test_case, code, data)\n\nPyDemo\\testcase\\product\\test_pay.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncomm\\unit\\checkResult.py:159: in check_result\n    check_json(expected_result, data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc_data = {'callbackType': 'closeCurrent', 'forwardUrl': '', 'message': '操作成功', 'navTabId': 'zfcpgl', ...}\ndst_data = '{}'\n\n    def check_json(src_data, dst_data):\n        \"\"\"\n        校验的json\n        :param src_data: 检验内容\n        :param dst_data: 接口返回的数据\n        :return:\n        \"\"\"\n        if isinstance(src_data, dict):\n            for key in src_data:\n                if key not in dst_data:\n>                   raise Exception(\"JSON格式校验，关键字 %s 不在返回结果 %s 中！\" % (key, dst_data))\nE                   Exception: JSON格式校验，关键字 statusCode 不在返回结果 {} 中！\n\ncomm\\unit\\checkResult.py:24: Exception",
    "steps" : [ {
      "name" : "POST请求接口",
      "time" : {
        "start" : 1682068359841,
        "stop" : 1682068359841,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "ac8d9aba44107109",
        "name" : "请求接口",
        "source" : "ac8d9aba44107109.attach",
        "type" : "text/plain",
        "size" : 3
      }, {
        "uid" : "c794bc50b64ffd04",
        "name" : "请求地址",
        "source" : "c794bc50b64ffd04.attach",
        "type" : "text/plain",
        "size" : 46
      }, {
        "uid" : "93c19826fcb8c439",
        "name" : "请求头",
        "source" : "93c19826fcb8c439.attach",
        "type" : "text/plain",
        "size" : 67
      }, {
        "uid" : "6492e10630f8aa25",
        "name" : "请求参数",
        "source" : "6492e10630f8aa25.attach",
        "type" : "text/plain",
        "size" : 117
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : false
    }, {
      "name" : "JSON格式校验接口",
      "time" : {
        "start" : 1682068361447,
        "stop" : 1682068361447,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "383151e2f843bebb",
        "name" : "实际code",
        "source" : "383151e2f843bebb.attach",
        "type" : "text/plain",
        "size" : 3
      }, {
        "uid" : "738651e0b83cd314",
        "name" : "期望code",
        "source" : "738651e0b83cd314.attach",
        "type" : "text/plain",
        "size" : 3
      }, {
        "uid" : "537e4c40735acb3e",
        "name" : "实际data",
        "source" : "537e4c40735acb3e.attach",
        "type" : "text/plain",
        "size" : 4
      }, {
        "uid" : "2aa7fb9d5e5a6447",
        "name" : "期望data",
        "source" : "2aa7fb9d5e5a6447.attach",
        "type" : "text/plain",
        "size" : 120
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "c56b5b2a9e813694",
      "name" : "log",
      "source" : "c56b5b2a9e813694.txt",
      "type" : "text/plain",
      "size" : 2160
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 2,
    "attachmentsCount" : 9,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "product"
  }, {
    "name" : "story",
    "value" : "test_pay"
  }, {
    "name" : "parentSuite",
    "value" : "PyDemo.testcase.product"
  }, {
    "name" : "suite",
    "value" : "test_pay"
  }, {
    "name" : "subSuite",
    "value" : "TestProduct"
  }, {
    "name" : "host",
    "value" : "LAPTOP-8MU3MRG8"
  }, {
    "name" : "thread",
    "value" : "23148-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "PyDemo.testcase.product.test_pay"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "test_case",
    "value" : "{'summary': 'pay', 'describe': 'test_pay', 'parameter': {'navTabId': 'zfcpgl', 'callbackType': 'closeCurrent', 'forwardUrl': '', 'productCode': '112', 'productName': '1213'}, 'check_body': {'check_type': 'check_json', 'expected_code': 200, 'expected_result': {'statusCode': '200', 'message': '操作成功', 'navTabId': 'zfcpgl', 'callbackType': 'closeCurrent', 'forwardUrl': ''}}}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "5f4ad95d678cbcfc.json",
  "parameterValues" : [ "{'summary': 'pay', 'describe': 'test_pay', 'parameter': {'navTabId': 'zfcpgl', 'callbackType': 'closeCurrent', 'forwardUrl': '', 'productCode': '112', 'productName': '1213'}, 'check_body': {'check_type': 'check_json', 'expected_code': 200, 'expected_result': {'statusCode': '200', 'message': '操作成功', 'navTabId': 'zfcpgl', 'callbackType': 'closeCurrent', 'forwardUrl': ''}}}" ]
}